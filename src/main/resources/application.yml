# port项目启动端口
# context-path网址访问项目名
# servlet-path网址访问方法名
server:
  port: 8085
  servlet:
    context-path: /SpeechTranscript
    path: /*


# 可以使用环境变量并指定默认值${JAVA_PROFILE_ENV:develop}
spring:
  profiles:
    active: ${JAVA_PROFILE_ENV:develop}
  
  
---

#    通过指定启动参数使用不同的profile，比如：
#    测试环境：java -jar [my-spring-boot.jar] -Dspring.profiles.active=["develop"]
#    生产环境：java -jar [my-spring-boot.jar] -Dspring.profiles.active=["produce"]

#    日志级别：
#    trace： 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。
#    debug： 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。
#    info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。
#    warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn（不算错误但是也请注意，比如以下depressed的方法）。
#    error： 错误信息。用的也比较多。
#    fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！

##########################################################
###################  开发环境的profile  ###################
##########################################################
spring:
  profiles: develop

logging:
  path: logs/
  file: SpeechTranscript_develop.log

---

##########################################################
###################  正式环境的profile  ###################
##########################################################
spring:
  profiles: produce

logging:
  path: logs/
  file: SpeechTranscript_produce.log
  